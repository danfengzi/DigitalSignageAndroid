package com.webService.testSoap.wcf;




//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.5.8.0
//
// Created by Quasar Development at 18/07/2016
//
//---------------------------------------------------




import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;
import org.ksoap2.transport.*;
import org.kxml2.kdom.Element;

import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class RTWxmdsBinding
{
    interface RTWIWcfMethod
    {
        RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws Exception;

        Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope, Object result) throws Exception;
    }

    String url="http://10.30.193.182/Xibo/xmds.php?v=3";

    int timeOut=60000;
    public List< HeaderProperty> httpHeaders;
    public boolean enableLogging;

    RTWIServiceEvents callback;
    public RTWxmdsBinding(){}

    public RTWxmdsBinding (RTWIServiceEvents callback)
    {
        this.callback = callback;
    }
    public RTWxmdsBinding(RTWIServiceEvents callback,String url)
    {
        this.callback = callback;
        this.url = url;
    }

    public RTWxmdsBinding(RTWIServiceEvents callback,String url,int timeOut)
    {
        this.callback = callback;
        this.url = url;
        this.timeOut=timeOut;
    }

    protected Transport createTransport()
    {
        try
        {
            java.net.URI uri = new java.net.URI(url);
            if(uri.getScheme().equalsIgnoreCase("https"))
            {
                int port=uri.getPort()>0?uri.getPort():443;
                return new HttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            }
            else
            {
                return new HttpTransportSE(url,timeOut);
            }

        }
        catch (java.net.URISyntaxException e)
        {
        }
        return null;
    }
    
    protected RTWExtendedSoapSerializationEnvelope createEnvelope()
    {
        RTWExtendedSoapSerializationEnvelope envelope= new RTWExtendedSoapSerializationEnvelope(RTWExtendedSoapSerializationEnvelope.VER11);
        return envelope;
    }
    
    protected List sendRequest(String methodName,RTWExtendedSoapSerializationEnvelope envelope,Transport transport  )throws Exception
    {
        return transport.call(methodName, envelope, httpHeaders);
    }

    Object getResult(Class destObj,Object source,String resultName,RTWExtendedSoapSerializationEnvelope __envelope) throws Exception
    {
        if(source==null)
        {
            return null;
        }
        if(source instanceof SoapPrimitive)
        {
            SoapPrimitive soap =(SoapPrimitive)source;
            if(soap.getName().equals(resultName))
            {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
        }
        else
        {
            SoapObject soap = (SoapObject)source;
            if (soap.hasProperty(resultName))
            {
                Object j=soap.getProperty(resultName);
                if(j==null)
                {
                    return null;
                }
                Object instance=__envelope.get(j,destObj);
                return instance;
            }
            else if( soap.getName().equals(resultName)) {
                Object instance=__envelope.get(source,destObj);
                return instance;
            }
       }

       return null;
    }

        
    public String RegisterDisplay(final String serverKey,final String hardwareKey,final String displayName,final String version ) throws Exception
    {
        return (String)execute(new RTWIWcfMethod()
        {
            @Override
            public RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              RTWExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:xmds", "RegisterDisplay");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="serverKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(serverKey!=null?serverKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="hardwareKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(hardwareKey!=null?hardwareKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="displayName";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(displayName!=null?displayName:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="version";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(version!=null?version:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ActivationMessage");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return j.toString();
                }
                else if (obj!= null && obj instanceof String){
                    return (String)obj;
                }
                return null;
            }
        },"urn:xmds#RegisterDisplay");
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> RegisterDisplayAsync(final String serverKey,final String hardwareKey,final String displayName,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return RegisterDisplay( serverKey,hardwareKey,displayName,version);
            }
        });
    }
    
    public String RequiredFiles(final String serverKey,final String hardwareKey,final String version ) throws Exception
    {
        return (String)execute(new RTWIWcfMethod()
        {
            @Override
            public RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              RTWExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:xmds", "RequiredFiles");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="serverKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(serverKey!=null?serverKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="hardwareKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(hardwareKey!=null?hardwareKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="version";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(version!=null?version:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("RequiredFilesXml");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return j.toString();
                }
                else if (obj!= null && obj instanceof String){
                    return (String)obj;
                }
                return null;
            }
        },"urn:xmds#RequiredFiles");
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> RequiredFilesAsync(final String serverKey,final String hardwareKey,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return RequiredFiles( serverKey,hardwareKey,version);
            }
        });
    }
    
    public String GetFile(final String serverKey,final String hardwareKey,final String filePath,final String fileType,final Integer chunkOffset,final Integer chuckSize,final String version ) throws Exception
    {
        return (String)execute(new RTWIWcfMethod()
        {
            @Override
            public RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              RTWExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:xmds", "GetFile");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="serverKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(serverKey!=null?serverKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="hardwareKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(hardwareKey!=null?hardwareKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="filePath";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(filePath!=null?filePath:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="fileType";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(fileType!=null?fileType:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="chunkOffset";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(chunkOffset!=null?chunkOffset:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="chuckSize";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(chuckSize!=null?chuckSize:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="version";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(version!=null?version:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("file");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return j.toString();
                }
                else if (obj!= null){
                    return obj.toString();
                }
                return null;
            }
        },"urn:xmds#GetFile");
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> GetFileAsync(final String serverKey,final String hardwareKey,final String filePath,final String fileType,final Integer chunkOffset,final Integer chuckSize,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return GetFile( serverKey,hardwareKey,filePath,fileType,chunkOffset,chuckSize,version);
            }
        });
    }
    
    public String Schedule(final String serverKey,final String hardwareKey,final String version ) throws Exception
    {
        return (String)execute(new RTWIWcfMethod()
        {
            @Override
            public RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              RTWExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:xmds", "Schedule");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="serverKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(serverKey!=null?serverKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="hardwareKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(hardwareKey!=null?hardwareKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="version";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(version!=null?version:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("ScheduleXml");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return j.toString();
                }
                else if (obj!= null && obj instanceof String){
                    return (String)obj;
                }
                return null;
            }
        },"urn:xmds#Schedule");
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> ScheduleAsync(final String serverKey,final String hardwareKey,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return Schedule( serverKey,hardwareKey,version);
            }
        });
    }
    
    public Boolean BlackList(final String serverKey,final String hardwareKey,final Integer mediaId,final String type,final String reason,final String version ) throws Exception
    {
        return (Boolean)execute(new RTWIWcfMethod()
        {
            @Override
            public RTWExtendedSoapSerializationEnvelope CreateSoapEnvelope(){
              RTWExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                SoapObject __soapReq = new SoapObject("urn:xmds", "BlackList");
                __envelope.setOutputSoapObject(__soapReq);
                
                PropertyInfo __info=null;
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="serverKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(serverKey!=null?serverKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="hardwareKey";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(hardwareKey!=null?hardwareKey:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="mediaId";
                __info.type=PropertyInfo.INTEGER_CLASS;
                __info.setValue(mediaId!=null?mediaId:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="type";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(type!=null?type:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="reason";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(reason!=null?reason:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                __info = new PropertyInfo();
                __info.namespace="";
                __info.name="version";
                __info.type=PropertyInfo.STRING_CLASS;
                __info.setValue(version!=null?version:SoapPrimitive.NullNilElement);
                __soapReq.addProperty(__info);
                return __envelope;
            }
            
            @Override
            public Object ProcessResult(RTWExtendedSoapSerializationEnvelope __envelope,Object __result)throws Exception {
                SoapObject __soap=(SoapObject)__result;
                Object obj = __soap.getProperty("success");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class))
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    return new Boolean(j.toString());
                }
                else if (obj!= null && obj instanceof Boolean){
                    return (Boolean)obj;
                }
                return null;
            }
        },"urn:xmds#BlackList");
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< Boolean>> BlackListAsync(final String serverKey,final String hardwareKey,final Integer mediaId,final String type,final String reason,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< Boolean>() {
            public Boolean Func() throws Exception {
                return BlackList( serverKey,hardwareKey,mediaId,type,reason,version);
            }
        });
    }
    
    public String SubmitLog(final String version,final String serverKey,final String hardwareKey,final String logXml ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> SubmitLogAsync(final String version,final String serverKey,final String hardwareKey,final String logXml)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return SubmitLog( version,serverKey,hardwareKey,logXml);
            }
        });
    }
    
    public String SubmitStats(final String version,final String serverKey,final String hardwareKey,final String statXml ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> SubmitStatsAsync(final String version,final String serverKey,final String hardwareKey,final String statXml)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return SubmitStats( version,serverKey,hardwareKey,statXml);
            }
        });
    }
    
    public String MediaInventory(final String version,final String serverKey,final String hardwareKey,final String mediaInventory ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> MediaInventoryAsync(final String version,final String serverKey,final String hardwareKey,final String mediaInventory)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return MediaInventory( version,serverKey,hardwareKey,mediaInventory);
            }
        });
    }
    
    public String GetResource(final String serverKey,final String hardwareKey,final String layoutId,final String regionId,final String mediaId,final String version ) throws Exception
    {
/*This feature is available in Premium account, Check http://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account*/
        return null;    
    }
    
    public android.os.AsyncTask< Void, Void, RTWOperationResult< String>> GetResourceAsync(final String serverKey,final String hardwareKey,final String layoutId,final String regionId,final String mediaId,final String version)
    {
        return executeAsync(new RTWFunctions.IFunc< String>() {
            public String Func() throws Exception {
                return GetResource( serverKey,hardwareKey,layoutId,regionId,mediaId,version);
            }
        });
    }

    
    protected Object execute(RTWIWcfMethod wcfMethod,String methodName) throws Exception
    {
        Transport __httpTransport=createTransport();
        __httpTransport.debug=enableLogging;
        RTWExtendedSoapSerializationEnvelope __envelope=wcfMethod.CreateSoapEnvelope();
        try
        {
            sendRequest(methodName, __envelope, __httpTransport);
            
        }
        finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    android.util.Log.i("requestDump",__httpTransport.requestDump);    
                    
                }
                if (__httpTransport.responseDump != null) {
                    android.util.Log.i("responseDump",__httpTransport.responseDump);
                }
            }
        }
        Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault){
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault)__retObj;
            throw convertToException(__fault,__envelope);
        }else{
            return wcfMethod.ProcessResult(__envelope,__retObj);
        }
    }
    
    protected < T> android.os.AsyncTask< Void, Void, RTWOperationResult< T>>  executeAsync(final RTWFunctions.IFunc< T> func)
    {
        return new android.os.AsyncTask< Void, Void, RTWOperationResult< T>>()
        {
            @Override
            protected void onPreExecute() {
                callback.Starting();
            };
            @Override
            protected RTWOperationResult< T> doInBackground(Void... params) {
                RTWOperationResult< T> result = new RTWOperationResult< T>();
                try
                {
                    result.Result= func.Func();
                }
                catch(Exception ex)
                {
                    ex.printStackTrace();
                    result.Exception=ex;
                }
                return result;
            }
            
            @Override
            protected void onPostExecute(RTWOperationResult< T> result)
            {
                callback.Completed(result);
            }
        }.execute();
    }
        
    Exception convertToException(org.ksoap2.SoapFault fault,RTWExtendedSoapSerializationEnvelope envelope)
    {

        return new Exception(fault.faultstring);
    }
}


